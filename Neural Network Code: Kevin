### import libraries ###
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
import matplotlib.pyplot as plt
import seaborn as sns
### Import Data ###
mail = pd.read_csv('Fundraising.csv')

mail.head()
### Drop Target_D ###

if 'TARGET_D' in mail.columns:
    mail = mail.drop(columns=['TARGET_D'])
### Preview Data ###
mail.head()   
# Identify features with correlation > 0.02 with TARGET_B
# Calculate correlations of all columns with TARGET_B
correlations = mail.corrwith(mail['TARGET_B'])

# Filter to show only those above 0.02
correlated_features = correlations[correlations > 0.02]

# Drop TARGET_B itself from the results
correlated_features = correlated_features.drop('TARGET_B', errors='ignore')

# Display the result
print("Features with correlation > 0.02 with TARGET_B:\n")
print(correlated_features.sort_values(ascending=False))
### Define X and y ###
X = mail[selected_features]
y = mail["TARGET_B"]
### Handle missing values (if any) by filling with mean ###
X = X.fillna(X.mean())
### Scale the features ###
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
### split dataset ###
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42, stratify=y)
### Train Neural Network ###
mlp = MLPClassifier(hidden_layer_sizes=(10,), max_iter=500, random_state=42)
mlp.fit(X_train, y_train)
### Predictions ###
y_pred = mlp.predict(X_test)
y_prob = mlp.predict_proba(X_test)[:, 1]
### Confusion Matrix and Report ###
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_prob)
### Plot confusion matrix ###
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.tight_layout()
# Display correlations in Jupyter notebook
display(corrlist[corrlist > 0.02])
from sklearn import metrics  # make sure this is imported

# Generate and print classification report for training data
print(metrics.classification_report(
    y_true=y_train,
    y_pred=mlp.predict(X_train)
))
